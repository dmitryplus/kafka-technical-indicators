version: '2.4'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.9
    container_name: zookeeper-terminal-helper
    healthcheck:
      test: "[[ $$(echo srvr | nc localhost 2181 | grep -oG 'Mode: standalone') = \"Mode: standalone\" ]]"
      interval: 10s
      timeout: 1s
      retries: 30
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    #    ports:
    #      - "2181:2181"
    network_mode: host

  kafka1:
    image: confluentinc/cp-kafka:7.0.9
    container_name: kafka1-terminal-helper
    depends_on:
      zookeeper:
        condition: service_healthy
    env_file:
      - .env
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'localhost:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_CONNECT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    #    ports:
    #      - "9092:9092"
    network_mode: host

  kafka-init-topics:
    image: confluentinc/cp-kafka:7.0.9
    container_name: kafka-init-topics-terminal-helper
    depends_on:
      - kafka1
    command: bash -c 'echo "Waiting for Kafka to be ready..." &&
      cub kafka-ready -b ${KAFKA_CONNECT} 1 30 &&
      echo "Create config topic..." &&
      kafka-topics --create --topic ${TOPIC_CONFIG} --partitions 1 --replication-factor 1 --config cleanup.policy=compact --config delete.retention.ms=10 --config min.cleanable.dirty.ratio=0.1 --config min.compaction.lag.ms=10 --config max.compaction.lag.ms=100 --if-not-exists --bootstrap-server ${KAFKA_CONNECT} &&
      echo "Create candles topics..." &&
      kafka-topics --create --topic "candles-1-min" --partitions 10 --replication-factor 1 --if-not-exists --bootstrap-server ${KAFKA_CONNECT} &&
      kafka-topics --create --topic "candles-5-min" --partitions 10 --replication-factor 1 --if-not-exists --bootstrap-server ${KAFKA_CONNECT} &&
      kafka-topics --create --topic "candles-15-min" --partitions 10 --replication-factor 1 --if-not-exists --bootstrap-server ${KAFKA_CONNECT} &&
      kafka-topics --create --topic "candles-30-min" --partitions 10 --replication-factor 1 --if-not-exists --bootstrap-server ${KAFKA_CONNECT} &&
      kafka-topics --create --topic "candles-1-hour" --partitions 10 --replication-factor 1 --if-not-exists --bootstrap-server ${KAFKA_CONNECT} &&
      kafka-topics --create --topic "candles-4-hour" --partitions 10 --replication-factor 1 --if-not-exists --bootstrap-server ${KAFKA_CONNECT} &&
      kafka-topics --create --topic "candles-1-day" --partitions 10 --replication-factor 1 --if-not-exists --bootstrap-server ${KAFKA_CONNECT} &&
      echo "Create candle gaps topics..." &&
      kafka-topics --delete --topic "gaps" --if-exists --bootstrap-server ${KAFKA_CONNECT} &&
      kafka-topics --create --topic "gaps" --partitions 5 --replication-factor 1 --if-not-exists --bootstrap-server ${KAFKA_CONNECT} &&
      echo "Create indicator values topics..." &&
      kafka-topics --delete --topic "macd-values-1-min" --if-exists --bootstrap-server ${KAFKA_CONNECT} &&
      kafka-topics --create --topic "macd-values-1-min" --partitions 10 --replication-factor 1 --bootstrap-server ${KAFKA_CONNECT} &&
      kafka-topics --delete --topic "macd-values-5-min" --if-exists --bootstrap-server ${KAFKA_CONNECT} &&
      kafka-topics --create --topic "macd-values-5-min" --partitions 10 --replication-factor 1 --bootstrap-server ${KAFKA_CONNECT} &&
      kafka-topics --delete --topic "macd-values-15-min" --if-exists --bootstrap-server ${KAFKA_CONNECT} &&
      kafka-topics --create --topic "macd-values-15-min" --partitions 10 --replication-factor 1 --bootstrap-server ${KAFKA_CONNECT} &&
      kafka-topics --delete --topic "macd-values-30-min" --if-exists --bootstrap-server ${KAFKA_CONNECT} &&
      kafka-topics --create --topic "macd-values-30-min" --partitions 10 --replication-factor 1 --bootstrap-server ${KAFKA_CONNECT} &&
      kafka-topics --delete --topic "macd-values-1-hour" --if-exists --bootstrap-server ${KAFKA_CONNECT} &&
      kafka-topics --create --topic "macd-values-1-hour" --partitions 10 --replication-factor 1 --bootstrap-server ${KAFKA_CONNECT} &&
      kafka-topics --delete --topic "macd-values-4-hour" --if-exists --bootstrap-server ${KAFKA_CONNECT} &&
      kafka-topics --create --topic "macd-values-4-hour" --partitions 10 --replication-factor 1 --bootstrap-server ${KAFKA_CONNECT} &&
      kafka-topics --delete --topic "macd-values-1-day" --if-exists --bootstrap-server ${KAFKA_CONNECT} &&
      kafka-topics --create --topic "macd-values-1-day" --partitions 10 --replication-factor 1 --bootstrap-server ${KAFKA_CONNECT} &&
      exit 0'

    network_mode: host

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop-terminal-helper
    restart: "no"
    #    ports:
    #      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "${KAFKA_CONNECT}"
    depends_on:
      - kafka1
    network_mode: host



  config-app:
    container_name: config-container
    build: images/config
    image: terminal_helper/config:latest
    env_file:
      - .env
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
      - type: bind
        source: ./need_tickers.txt
        target: /need_tickers.txt
        read_only: true
      - type: bind
        source: ./not_need_tickers.txt
        target: /not_need_tickers.txt
        read_only: true
    depends_on:
      - kafka1
    network_mode: host


  candle-1-min:
    container_name: candle-1-min
    build: images/candles
    image: terminal_helper/candles:latest
    env_file:
      - .env
    environment:
      INTERVAL: "${INTERVAL_ONE_MIN}"
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
    depends_on:
      - "kafka1"
    network_mode: host

  candle-5-min:
    container_name: candle-5-min
    build: images/candles
    image: terminal_helper/candles:latest
    env_file:
      - .env
    environment:
      INTERVAL: "${INTERVAL_FIVE_MIN}"
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
    depends_on:
      - "kafka1"
    network_mode: host

  candle-15-min:
    container_name: candle-15-min
    build: images/candles
    image: terminal_helper/candles:latest
    env_file:
      - .env
    environment:
      INTERVAL: "${INTERVAL_FIFTEEN_MIN}"
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
    depends_on:
      - "kafka1"
    network_mode: host

  candle-30-min:
    container_name: candle-30-min
    build: images/candles
    image: terminal_helper/candles:latest
    env_file:
      - .env
    environment:
      INTERVAL: "${INTERVAL_30_MIN}"
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
    depends_on:
      - "kafka1"
    network_mode: host

  candle-1-hour:
    container_name: candle-1-hour
    build: images/candles
    image: terminal_helper/candles:latest
    env_file:
      - .env
    environment:
      INTERVAL: "${INTERVAL_ONE_HOUR}"
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
    depends_on:
      - "kafka1"
    network_mode: host

  candle-4-hour:
    container_name: candle-4-hour
    build: images/candles
    image: terminal_helper/candles:latest
    env_file:
      - .env
    environment:
      INTERVAL: "${INTERVAL_FOUR_HOUR}"
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
    depends_on:
      - "kafka1"
    network_mode: host


  candle-1-day:
    container_name: candle-1-day
    build: images/candles
    image: terminal_helper/candles:latest
    env_file:
      - .env
    environment:
      INTERVAL: "${INTERVAL_ONE_DAY}"
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
    depends_on:
      - "kafka1"
    network_mode: host


  history:
    container_name: history-container
    build: images/history
    image: terminal_helper/history:latest
    env_file:
      - .env
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
      - type: bind
        source: ./images/history/src/market_data_cache
        target: /market_data_cache
        read_only: false
    depends_on:
      - kafka1
    network_mode: host


  lack:
    container_name: lack-container
    build: images/lack
    image: terminal_helper/lack:latest
    env_file:
      - .env
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
    depends_on:
      - kafka1
    network_mode: host


  indicator-macd-1-min:
    container_name: macd-value-container-1-min
    build: images/macd
    image: terminal_helper/macd:latest
    env_file:
      - .env
    environment:
      INTERVAL: "${INTERVAL_ONE_MIN}"
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
    depends_on:
      - kafka1
    network_mode: host

  indicator-macd-5-min:
    container_name: macd-value-container-5-min
    build: images/macd
    image: terminal_helper/macd:latest
    env_file:
      - .env
    environment:
      INTERVAL: "${INTERVAL_FIVE_MIN}"
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
    depends_on:
      - kafka1
    network_mode: host

  indicator-macd-15-min:
    container_name: macd-value-container-15-min
    build: images/macd
    image: terminal_helper/macd:latest
    env_file:
      - .env
    environment:
      INTERVAL: "${INTERVAL_FIFTEEN_MIN}"
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
    depends_on:
      - kafka1
    network_mode: host

  indicator-macd-30-min:
    container_name: macd-value-container-30-min
    build: images/macd
    image: terminal_helper/macd:latest
    env_file:
      - .env
    environment:
      INTERVAL: "${INTERVAL_30_MIN}"
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
    depends_on:
      - kafka1
    network_mode: host

  indicator-macd-1-hour:
    container_name: macd-value-container-1-hour
    build: images/macd
    image: terminal_helper/macd:latest
    env_file:
      - .env
    environment:
      INTERVAL: "${INTERVAL_ONE_HOUR}"
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
    depends_on:
      - kafka1
    network_mode: host

  indicator-macd-4-hour:
    container_name: macd-value-container-4-hour
    build: images/macd
    image: terminal_helper/macd:latest
    env_file:
      - .env
    environment:
      INTERVAL: "${INTERVAL_FOUR_HOUR}"
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
    depends_on:
      - kafka1
    network_mode: host

  indicator-macd-1-day:
    container_name: macd-value-container-1-day
    build: images/macd
    image: terminal_helper/macd:latest
    env_file:
      - .env
    environment:
      INTERVAL: "${INTERVAL_ONE_DAY}"
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
    depends_on:
      - kafka1
    network_mode: host



  gaps-1-min:
    container_name: gaps-container-1-min
    build: images/gaps
    image: terminal_helper/gaps:latest
    env_file:
      - .env
    environment:
      INTERVAL: "${INTERVAL_ONE_MIN}"
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
    depends_on:
      - kafka1
    network_mode: host

  gaps-5-min:
    container_name: gaps-container-5-min
    build: images/gaps
    image: terminal_helper/gaps:latest
    env_file:
      - .env
    environment:
      INTERVAL: "${INTERVAL_FIVE_MIN}"
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
    depends_on:
      - kafka1
    network_mode: host

  gaps-15-min:
    container_name: gaps-container-15-min
    build: images/gaps
    image: terminal_helper/gaps:latest
    env_file:
      - .env
    environment:
      INTERVAL: "${INTERVAL_FIFTEEN_MIN}"
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
    depends_on:
      - kafka1
    network_mode: host

  gaps-30-min:
    container_name: gaps-container-30-min
    build: images/gaps
    image: terminal_helper/gaps:latest
    env_file:
      - .env
    environment:
      INTERVAL: "${INTERVAL_30_MIN}"
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
    depends_on:
      - kafka1
    network_mode: host

  gaps-1-hour:
    container_name: gaps-container-1-hour
    build: images/gaps
    image: terminal_helper/gaps:latest
    env_file:
      - .env
    environment:
      INTERVAL: "${INTERVAL_ONE_HOUR}"
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
    depends_on:
      - kafka1
    network_mode: host

  gaps-4-hour:
    container_name: gaps-container-4-hour
    build: images/gaps
    image: terminal_helper/gaps:latest
    env_file:
      - .env
    environment:
      INTERVAL: "${INTERVAL_FOUR_HOUR}"
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
    depends_on:
      - kafka1
    network_mode: host

  gaps-1-day:
    container_name: gaps-container-1-day
    build: images/gaps
    image: terminal_helper/gaps:latest
    env_file:
      - .env
    environment:
      INTERVAL: "${INTERVAL_ONE_DAY}"
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
    depends_on:
      - kafka1
    network_mode: host



  websocket-macd-1-min:
    container_name: websocket-macd-1-min
    build: images/websocket
    image: terminal_helper/websocket:latest
    env_file:
      - .env
    environment:
      TOPIC: "macd-values-1-min"
    volumes:
      - type: bind
        source: ./src/infrastructure
        target: /infrastructure
        read_only: true
    depends_on:
      - kafka1
    network_mode: host

